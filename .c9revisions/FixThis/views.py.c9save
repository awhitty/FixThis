{"ts":1353996831932,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# from django.contrib.gis.geoip import GeoIP\n\nfrom django.http import HttpResponse\nfrom django.shortcuts import render_to_response, get_object_or_404, redirect\nfrom django.core.context_processors import csrf\nfrom django.contrib import messages\nfrom django.contrib.auth import login as auth_login, authenticate\nfrom django.views.generic.create_update import update_object\n\nfrom models import *\nfrom forms import *\n\n# TODO: Consider using another name for requests, since \"request\" is already a\n# thing in Django\ndef getLocation(request):\n\tlatitude = request.COOKIES.get('userLat','')\n\tlongitude = request.COOKIES.get('userLon','')\n\n\treturn latitude, longitude\n\n\ndef home(request, *args, **kwargs):\n\n\tif request.user.is_authenticated() or 'skip' in request.session:\n\t\tresponse = {\n\t\t\t'request': request,\n\t\t}\n\n\t\tif 'skip' in request.session:\n\t\t\tresponse['login_form'] = SlimAuthenticationForm\n\t\t\tresponse['registration_form'] = SlimUserCreationForm\n\t\treturn render_to_response('pages/dashboard.html', response)\n\telse:\n\t\treturn redirect('login')\n\ndef skipLogin(request, *args, **kwargs):\n\trequest.session['skip'] = True\n\treturn redirect('home')\n\n# Taken from django.contrib.auth.views\ndef login(request, *args, **kwargs):\n    \"\"\"\n    Displays the login form and handles the login action.\n    \"\"\"\n    redirect_to = request.REQUEST.get('next', '')\n\n    if request.method == \"POST\":\n        form = SlimAuthenticationForm(data=request.POST)\n        if form.is_valid():\n\t\t\tprint \"valid!\"\n            # # Use default setting if redirect_to is empty\n            # # Heavier security check -- don't allow redirection to a different\n            # # host.\n            # if netloc and netloc != request.get_host():\n            #     redirect_to = resolve_url(settings.LOGIN_REDIRECT_URL)\n\n            # Okay, security checks complete. Log the user in.\n\t\t\tauth_login(request, form.get_user())\n\n\t\t\tif request.session.test_cookie_worked():\n\t\t\t\trequest.session.delete_test_cookie()\n\n\t\t\treturn redirect(redirect_to)\n    else:\n        form = SlimAuthenticationForm(request)\n\n    request.session.set_test_cookie()\n\n    response = {\n    \t'request': request,\n        'login_form': form,\n\t\t'registration_form': SlimUserCreationForm\n    }\n\n    response.update(csrf(request))\n    return render_to_response('pages/login.html', response)\n\ndef login(request, *args, **kwargs):\n    \"\"\"\n    Displays the login form and handles the login action.\n    \"\"\"\n    redirect_to = request.REQUEST.get('next', '')\n\n    if request.method == \"POST\":\n        form = SlimAuthenticationForm(data=request.POST)\n        if form.is_valid():\n\t\t\tprint \"valid!\"\n            # # Use default setting if redirect_to is empty\n            # # Heavier security check -- don't allow redirection to a different\n            # # host.\n            # if netloc and netloc != request.get_host():\n            #     redirect_to = resolve_url(settings.LOGIN_REDIRECT_URL)\n\n            # Okay, security checks complete. Log the user in.\n\t\t\tauth_login(request, form.get_user())\n\n\t\t\tif request.session.test_cookie_worked():\n\t\t\t\trequest.session.delete_test_cookie()\n\n\t\t\treturn redirect(redirect_to)\n    else:\n        form = SlimAuthenticationForm(request)\n\n    request.session.set_test_cookie()\n\n    response = {\n    \t'request': request,\n        'login_form': form,\n\t\t'registration_form': SlimUserCreationForm\n    }\n\n    template = kwargs.pop('template', None)\n\n    response.update(csrf(request))\n    return render_to_response(template, response)\n\ndef createUser(request, *args, **kwargs):\n\tredirect_to = request.REQUEST.get('next', '')\n\n\tif request.method == \"POST\":\n\t\tform = SlimUserCreationForm(data=request.POST)\n\t\tif form.is_valid():\n\t\t\tnew_user = form.save()\n\t\t\tmessages.info(request, \"Thanks for registering. You are now logged in.\")\n\t\t\tnew_user = authenticate(username=request.POST['username'],\n                                    password=request.POST['password1'])\n\t\t\tauth_login(request, new_user)\n\t\t\treturn redirect('home')\n\n\telse:\n\t\tform = SlimAuthenticationForm(request)\n\n\trequest.session.set_test_cookie()\n\n\tresponse = {\n    \t'request': request,\n        'login_form': SlimAuthenticationForm,\n\t\t'registration_form': form\n    }\n\n\treturn render_to_response('pages/login.html', response)\n\ndef listRequests(request, *args, **kwargs):\n\t# print request\n\tlatitude, longitude = getLocation(request)\n\n\tif latitude and longitude:\n\t\trequests = Request.objects.nearby(latitude, longitude, 2)\n\telse:\n\t\trequests = None\n\n\tresponse = {\n\t\t'request': request, \n\t\t'requests': requests,\n\t\t'latitude': latitude,\n\t\t'longitude': longitude,\n\t}\n\n\treturn render_to_response('pages/list.html', response)\n\ndef mapRequests(request, *args, **kwargs):\n\tlatitude, longitude = getLocation(request)\n\n\tif latitude and longitude:\n\t\trequests = Request.objects.nearby(latitude, longitude, 2)\n\telse:\n\t\trequests = None\n\n\tresponse = {\n\t\t'request': request, \n\t\t'requests': requests,\n\t\t'latitude': latitude,\n\t\t'longitude': longitude,\n\t}\n\n\treturn render_to_response('pages/map.html', response)\n\ndef detailRequest(request, request_id, *args, **kwargs):\n\ttry:\n\t\tlatitude = request.COOKIES['userLat']\n\t\tlongitude = request.COOKIES['userLon']\n\texcept:\n\t\tlatitude = 30\n\t\tlongitude = 30\n\n\tfixthis_request = get_object_or_404(Request, pk=request_id)\n\n\n\n\tresponse = {\n\t\t'request': request, \n\t\t'fix': fixthis_request,\n\t\t'latitude': latitude,\n\t\t'longitude': longitude,\n\t}\n\n\treturn render_to_response('pages/detail.html', response)\n\ndef addRequest(request, *args, **kwargs):\n\tif request.method == 'GET':\n\t\tform = SubmitForm()\n\telse:\n\t\tprint request.POST\n\t\tform = SubmitForm(request.POST, request.FILES)\n\t\tif form.is_valid():\n\t\t    req = form.save()\n\t\t    if request.user.is_authenticated():\n\t\t    \treq.submitted_user = request.user\n\t\t    \treq.save()\n\t\t    \treturn redirect('detail-request', req.id)\n\t\telse:\n\t\t\tmessages.error(request, \"Please fix the errors\")\n\n\n\tresponse = {\n\t\t'request': request,\n\t\t'form': form,\n\t}\n\n\tresponse.update(csrf(request))\n\treturn render_to_response('pages/submit.html', response)\n\ndef previewImage(request, *args, **kwargs):\n\tif request.method == 'POST':\n\n\t\treturn HttpResponse(\"Good request\")\n\telse:\n\t\treturn \"Bad request!\"\n\n# @login_required\ndef settingsPage(request, *args, **kwargs):\n\tprofile, created = Profile.objects.get_or_create(user=request.user)\n\n\treturn update_object(request,\n                        form_class=ProfileForm,\n                        object_id=profile.id,\n                        template_name='pages/settings.html')\n\ndef updateRequestStatus(request, request_id, *args, **kwargs):\n\tfixthis_request = get_object_or_404(Request, pk=request_id)\n\tif request.method == 'POST':\n\t\tstatus = request.POST.get('status','')\n\t\tif status == '0':\n\t\t\tfixthis_request.status = 0\n\t\t\tfixthis_request.assigned_user = None\n\t\telif status == '1':\n\t\t\tfixthis_request.status = 1\n\t\t\tfixthis_request.assigned_user = request.user\n\t\telse:\n\t\t\tfixthis_request.status = 2\n\t\t\tfixthis_request.assigned_user = None\n\n\t\tprint fixthis_request.save()\n\n\treturn HttpResponse(\"Success!\")\n\ndef myfixthis(request, *args, **kwargs):\n\tprofile, created = Profile.objects.get_or_create(user=request.user)\n\t# subscribed_requests = Request.objects.filter(tags__name__in=profile.subscribed_tags.all())\n\tsubscribed_requests = Request.objects.all()\n\tsubmitted_requests = Request.objects.filter(submitted_user=request.user)\n\tassigned_requests = Request.objects.filter(assigned_user=request.user)\n\n\tresponse = {\n\t\t'request': request,\n\t\t'submitted': submitted_requests,\n\t\t'assigned': assigned_requests,\n\t\t'subscribed': subscribed_requests,\n\t}\n\n\treturn render_to_response('pages/myfixthis.html', response)\n\n\n\n\n\n\n\t\t\n"]],"start1":0,"start2":0,"length1":0,"length2":7597}]],"length":7597}
